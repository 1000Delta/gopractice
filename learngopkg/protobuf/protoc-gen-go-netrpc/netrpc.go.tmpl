{{ $root := . }}

type {{ .ServiceName }}Interface interface {
  {{- range .MethodList }}
  {{ .MethodName }}(req {{ .InputTypeName }}, rsp *{{ .OutputTypeName }}) error
  {{- end }}
}

func Register{{ .ServiceName }}(srv *rpc.Server, x {{ .ServiceName }}Interface) error {
    if err := srv.RegisterName("{{ .ServiceName }}", x); err != nil {
        return err
    }
    return nil
}

type {{ .ServiceName }}Client struct {
    *rpc.Client
}

var _ {{ .ServiceName }}Interface = (*{{ .ServiceName }}Client)(nil)

func Dial{{ .ServiceName }}(network, address string) (*{{ .ServiceName }}Client, error) {
    c, err := rpc.Dial(network, address)
    if err != nil {
        return nil, err
    }
    return &{{ .ServiceName }}Client{Client: c}, nil
}

func Dial{{ .ServiceName }}WithCodec(network, address string) (*{{ .ServiceName }}Client, error) {
    conn, err := net.Dial(network, address)
    if err != nil {
        return nil, err
    }
    return &{{ .ServiceName }}Client{Client: rpc.NewClientWithCodec(codec.NewClientCodec(conn))}, nil
}

{{ range .MethodList }}
func (p *{{ $root.ServiceName }}Client) {{ .MethodName }}(req {{ .InputTypeName }}, rsp *{{ .OutputTypeName }}) error {
    return p.Client.Call("{{ $root.ServiceName }}.{{ .MethodName }}", req, rsp)
}
{{- end }}